import numpy as np
import torch
# import matplotlib.pyplot as plt
from PIL import Image
from torchvision import transforms
import torch.nn.functional as F
# from utils.gaussianblur import GaussianBlur
from mnist.mnist_net_F import Net
from mnist.utils import img_conv2d, template
# import torch.nn as nn

import argparse
import os
import time

parser = argparse.ArgumentParser(description="batch classify images")
parser.add_argument('--imagedir', type=str, default='attacks/') # do not change
parser.add_argument('--attack', type=str, default='FGSM')
args = parser.parse_args()

attack  = args.attack

pathdir = args.imagedir
pathdir = args.imagedir + attack + '_ms/hacked_data'

print("\nStep4: Conducting multiscale classification on adversarial image generated by {}.\n".format(attack))


# load model
net = Net()
params = torch.load('ckpt/model_augemented.pkl')
net.load_state_dict(params)
if torch.cuda.is_available():
    net.cuda()
net.eval()

trans = transforms.Compose([transforms.ToTensor()])


C = 0 
ns = 5
count_succ = np.zeros(ns+1)

for name in os.listdir(pathdir):
    filename = os.path.join(pathdir, name)

    true_label = int(filename[-7])

    img = np.load(filename)
    C += 1

    scale_preds = np.zeros([1, 10])

    for i in range(ns):
        #  do gaussian blur
        temp = template(2, i * 0.4)
        input_image = img_conv2d(img, temp)

        input_image = np.expand_dims(input_image, 2)
        input_image = trans(input_image / 255)
        input_image = input_image.view(-1, input_image.shape[0], input_image.shape[1], input_image.shape[2])
        input_image = input_image.float()
        preds = F.softmax(net(input_image.cuda()), dim=1)
        scale_preds += preds.cpu().detach().numpy()
        pred_label = np.argmax(preds.cpu().detach().numpy())

        if pred_label == int(true_label):
            count_succ[i] += 1

    scale_label = np.argmax(scale_preds)
    if scale_label == int(true_label):
        count_succ[ns] += 1

    if C % 50 == 0:
        print("processing: {} / {}".format(C, 500))
    if C >= 500:
        break

print("\nBefore defense: {} / {} \t >>> Classification accuracy:{:.2f} <<<".format(0, 500, 0))
print("After defense: {} / {} \t >>> Classification accuracy:{:.2f} <<<".format(int(count_succ[ns]), 500, count_succ[ns]/500))